---
version: '3.8'

x-environment-variables: &environment-variables
  API_URL: http://127.0.0.1:3000
  AUTH0_CLIENT_ID: $AUTH0_CLIENT_ID
  AUTH0_CLIENT_SECRET: $AUTH0_CLIENT_SECRET
  AUTH0_TENANT: $AUTH0_TENANT
  DATABASE_URL: postgres://postgres:password@postgres:5432/neon_law
  GATSBY_WEBPACK_PUBLICPATH: /
  GOOGLE_APPLICATION_CREDENTIALS: /app/credentials.json
  LOB_API_KEY: $LOB_API_KEY
  LOB_API_SECRET: $LOB_API_SECRET
  NEO4J_URL: bolt://neo4j:7687
  NEON_BOT_SLACK_TOKEN: $NEON_BOT_SLACK_TOKEN
  NODE_ENV: development
  ENVIRONMENT: development
  ROOT_DATABASE_URL: postgres://postgres:password@postgres:5432/postgres
  SENDGRID_API_KEY: $SENDGRID_API_KEY
  SHADOW_DATABASE_URL: postgres://postgres:password@postgres:5432/neon_law_shadow
  STRIPE_API_SECRET_KEY: $STRIPE_API_SECRET_KEY
  TRANSLOADIT_KEY: $TRANSLOADIT_KEY
  TRANSLOADIT_SECRET: $TRANSLOADIT_SECRET
  TRANSLOADIT_TEMPLATE_ID: $TRANSLOADIT_TEMPLATE_ID

x-node-volumes: &node-volumes
  - ./:/app
  - ./neon-law-staging.credentials.json:/credentials/credentials.json
  - /app/node_modules/
  - /app/server/node_modules/
  - /app/packages/interface/node_modules/

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    ports:
      - 9200:9200
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: neon_law
    ports:
      - 5432:5432
    restart: unless-stopped
    volumes:
      - ./docker/pg-init-scripts:/docker-entrypoint-initdb.d
    command: ['postgres', '-c', 'shared_preload_libraries=pg_stat_statements']
    logging:
      driver: none

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - 8080:8088
    restart: unless-stopped
    logging:
      driver: none

  neo4j:
    image: neo4j:enterprise
    container_name: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/graphs
      NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
    logging:
      driver: none

  api:
    build:
      context: ./
      dockerfile: ./server/Dockerfile
    restart: always
    depends_on:
      - postgres
    container_name: api
    ports:
      - 3000:3000
    environment:
      <<: *environment-variables
      PROCESS_NAME: api
    volumes: *node-volumes

  workers:
    build:
      context: ./
      dockerfile: ./server/Dockerfile
    restart: always
    depends_on:
      - postgres
      - neo4j
    container_name: workers
    environment:
      <<: *environment-variables
      PROCESS_NAME: workers
    volumes: *node-volumes
    command:
      - yarn
      - start:workers

  interface:
    build:
      context: ./
      dockerfile: ./docker/development.interface.Dockerfile
    container_name: interface
    restart: always
    depends_on:
      - api
    ports:
      - 8000:8000
    volumes: *node-volumes
    environment:
      PACKAGE_NAME: interface

  shell:
    ipc: host
    image: docker.pkg.github.com/neonlaw/codebase/base
    container_name: shell
    volumes: *node-volumes
    environment: *environment-variables
    restart: unless-stopped
    depends_on:
      - postgres

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:6.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.4.0-6.1.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - '8083:8083'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components'
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.1.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - '9021:9021'
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: 'http://ksqldb-server:8088'
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: 'http://localhost:8088'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.1.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - '8088:8088'
    environment:
      KSQL_CONFIG_DIR: '/etc/ksql'
      KSQL_BOOTSTRAP_SERVERS: 'broker:29092'
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: 'http://0.0.0.0:8088'
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor'
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: 'io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor'
      KSQL_KSQL_CONNECT_URL: 'http://connect:8083'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:6.1.1
    container_name: ksqldb-cli
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.1.1
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
