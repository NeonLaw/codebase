---
name: releases

on:
  release:
    types:
      - published

jobs:
  update_git_flow_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/git_flow@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Login to Crates
        run: cargo login $(doppler secrets get CRATES_API_KEY --plain)
        env:
          CRATES_API_KEY: ${{ secrets.CRATES_API_KEY }}

      - name: Publish Git Flow
        run: cargo publish
        working-directory: ./git_flow

  update_i18n_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/i18n@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Publish @neonlaw/i18n
        run: npm publish --access public
        working-directory: ./i18n
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  update_neon_nlp_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_nlp@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Login to Crates
        run: cargo login $CRATES_API_KEY
        env:
          CRATES_API_KEY: ${{ secrets.CRATES_API_KEY }}
        if: startsWith(github.ref, 'refs/tags/neon_nlp@')

      - name: Publish Neon NLP
        run: cargo publish
        if: startsWith(github.ref, 'refs/tags/neon_nlp@')
        working-directory: ./neon_nlp

  update_web_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/web@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Login to NPM
        run: npm set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      - name: Publish @neonlaw/web
        run: npm publish --access public
        working-directory: ./web

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_USERNAME }}
          password: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

      - name: Build the Docker image
        run: |-
          docker build \
            --tag "ghcr.io/neonlaw/web:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/web@/,"")}1')" \
            -f ./web/Dockerfile \
            .

      - name: Push the Docker image to GitHub Registry
        run: docker push ghcr.io/neonlaw/web:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/web@/,"")}1')

  update_server_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/server@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Login to NPM
        run: npm set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      - name: Publish @neonlaw/server
        run: npm publish --access public
        working-directory: ./server

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_USERNAME }}
          password: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

      - name: Build the Docker image
        run: |-
          docker build \
            --tag "ghcr.io/neonlaw/server:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/server@/,"")}1')" \
            -f ./server/Dockerfile \
            .

      - name: Push the Docker image to GitHub Registry
        run: docker push ghcr.io/neonlaw/server:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/server@/,"")}1')

  update_mdx_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/mdx@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Login to NPM
        run: npm set //registry.npmjs.org/:_authToken $NODE_AUTH_TOKEN
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      - name: Publish @neonlaw/mdx
        run: npm publish --access public
        working-directory: ./mdx

  update_neon_postgres_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_postgres@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_postgres gem
        run: gem build neon_postgres.gemspec
        working-directory: ./postgres
      - name: Publish neon_postgres gem
        run: gem push neon_postgres-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_postgres@/,"")}1').gem
        working-directory: ./postgres
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

  update_neon_email_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_email@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_email gem
        run: gem build neon_email.gemspec
        working-directory: ./email
      - name: Publish neon_email gem to Ruby Gems
        run: gem push neon_email-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_email@/,"")}1').gem
        working-directory: ./email
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: neon-law-staging
          service_account_email: github-actions@neon-law-staging.iam.gserviceaccount.com
          service_account_key: ${{ secrets.STAGING_GCP_CREDENTIALS }}
          export_default_credentials: true
      - name: Upload zip file to GCP Staging
        run: |
          zip emails.zip -r emails/*
          gsutil cp s3://neon-law-staging-function-code/emails/$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_email@/,"")}1').zip emails.zip

      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: neon-law-production
          service_account_email: github-actions@neon-law-production.iam.gserviceaccount.com
          service_account_key: ${{ secrets.PRODUCTION_GCP_CREDENTIALS }}
          export_default_credentials: true
      - name: Upload zip file to GCP Production
        run: |
          zip emails.zip -r emails/*
          gsutil cp s3://neon-law-production-function-code/emails/$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_email@/,"")}1').zip emails.zip


  update_neon_documents_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_documents@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_documents gem
        run: gem build neon_documents.gemspec
        working-directory: ./documents
      - name: Publish neon_documents gem to Rubygems
        run: gem push neon_documents-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_documents@/,"")}1').gem
        working-directory: ./documents
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: neon-law-staging
          service_account_email: github-actions@neon-law-staging.iam.gserviceaccount.com
          service_account_key: ${{ secrets.STAGING_GCP_CREDENTIALS }}
          export_default_credentials: true
      - name: Upload zip file to GCP Storage
        run: |
          zip documents.zip -r documents/*
          gsutil cp s3://neon-law-staging-function-code/documents/$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_documents@/,"")}1').zip emails.zip

      - uses: google-github-actions/setup-gcloud@master
        with:
          project_id: neon-law-production
          service_account_email: github-actions@neon-law-production.iam.gserviceaccount.com
          service_account_key: ${{ secrets.PRODUCTION_GCP_CREDENTIALS }}
          export_default_credentials: true
      - name: Upload zip file to GCP Production
        run: |
          zip documents.zip -r documents/*
          gsutil cp s3://neon-law-production-function-code/documents/$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_documents@/,"")}1').zip emails.zip

  update_neon_diagrams_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_diagrams@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3'
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
      - name: Install dependencies
        working-directory: ./diagrams
        run: poetry install
      - name: Publish to PyPi
        working-directory: ./diagrams
        run: |
          poetry config http-basic.pypi "__token__" "$POETRY_PYPI_TOKEN_PYPI"
          poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}

  update_neon_schemas_python_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_schemas@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3'
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
      - name: Install dependencies
        working-directory: ./schemas
        run: poetry install
      - name: Publish to PyPi
        working-directory: ./schemas
        run: |
          poetry config http-basic.pypi "__token__" "$POETRY_PYPI_TOKEN_PYPI"
          poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.POETRY_PYPI_TOKEN_PYPI }}

  update_neon_schemas_ruby_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_schemas@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_schemas gem
        run: gem build neon_schemas.gemspec
        working-directory: ./schemas
      - name: Publish neon_schemas gem to Rubygems
        run: gem push neon_schemas-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_schemas@/,"")}1').gem
        working-directory: ./schemas
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

  update_neon_schemas_javascript_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_schemas@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Publish @neonlaw/schemas
        run: npm publish --access public
        working-directory: ./schemas
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  update_neon_secrets_ruby_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_secrets@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_secrets gem
        run: gem build neon_secrets.gemspec
        working-directory: ./secrets
      - name: Publish neon_secrets gem to Rubygems
        run: gem push neon_secrets-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_secrets@/,"")}1').gem
        working-directory: ./secrets
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

  update_neon_webhooks_ruby_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/webhooks@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Build neon_webhooks gem
        run: gem build neon_webhooks.gemspec
        working-directory: ./secrets
      - name: Publish neon_webhooks gem to Rubygems
        run: gem push neon_webhooks-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/webhooks@/,"")}1').gem
        working-directory: ./secrets
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GIT_USERNAME }}
          password: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

      - name: Build the Docker image
        run: |-
          docker build \
            --tag "ghcr.io/neonlaw/webhooks:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/webhooks@/,"")}1')" \
            -f ./webhooks/Dockerfile \
            .

      - name: Push the Docker image to GitHub Registry
        run: docker push ghcr.io/neonlaw/webhooks:$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/webhooks@/,"")}1')
