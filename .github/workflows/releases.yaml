---
name: releases

on:
  release:
    types:
      - published

jobs:
  update_git_flow_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/git_flow@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Login to Crates
        run: doppler run -- cargo login $(doppler secrets get CRATES_API_KEY --plain)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}

      - name: Publish Git Flow
        run: cargo publish
        working-directory: ./git_flow

  update_i18n_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/i18n@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Login to NPM
        run: doppler run -- npm config set //registry.npmjs.org/:_authToken $(doppler secrets get NPM_AUTH_TOKEN --plain)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}
      - name: Publish @neonlaw/i18n
        run: npm publish --access public
        working-directory: ./i18n

  update_neon_nlp_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_nlp@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1

      - name: Login to Crates
        run: doppler run -- cargo login $(doppler secrets get CRATES_API_KEY --plain)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}
        if: startsWith(github.ref, 'refs/tags/neon_nlp@')

      - name: Publish Neon NLP
        run: cargo publish
        if: startsWith(github.ref, 'refs/tags/neon_nlp@')
        working-directory: ./neon_nlp

  update_web_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/web@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Login to NPM
        run: doppler run -- npm config set //registry.npmjs.org/:_authToken $(doppler secrets get NPM_AUTH_TOKEN --plain)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}
      - name: Publish @neonlaw/web
        run: npm publish --access public
        working-directory: ./web

  update_server_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/server@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Login to NPM
        run: doppler run -- npm config set //registry.npmjs.org/:_authToken $(doppler secrets get NPM_AUTH_TOKEN --plain)
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}
      - name: Publish @neonlaw/server
        run: npm publish --access public
        working-directory: ./web

  update_neon_postgres_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_postgres@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Build neon_postgres gem
        run: gem build neon_postgres.gemspec
        working-directory: ./postgres
      - name: Publish neon_postgres gem
        run: doppler run -- gem push neon_postgres-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_postgres@/,"")}1').gem
        working-directory: ./postgres
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}

  update_neon_email_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_email@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Build neon_email gem
        run: gem build neon_email.gemspec
        working-directory: ./email
      - name: Publish neon_email gem to Rubygems
        run: doppler run -- gem push neon_email-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_email@/,"")}1').gem
        working-directory: ./email
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}

  update_neon_documents_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_documents@')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - name: Build neon_documents gem
        run: gem build neon_documents.gemspec
        working-directory: ./documents
      - name: Publish neon_documents gem to Rubygems
        run: doppler run -- gem push neon_documents-$(echo $GITHUB_REF | awk '{gsub(/^refs\/tags\/neon_email@/,"")}1').gem
        working-directory: ./documents
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}

  update_neon_diagrams_package:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/neon_diagrams@')

    steps:
      - uses: actions/checkout@v2
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v1
      - uses: actions/setup-python@v1
        with:
          python-version: '3'
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.4
      - name: Install dependencies
        working-directory: ./diagrams
        run: poetry install
      - name: Publish to PyPi
        working-directory: ./diagrams
        run: |
          poetry config http-basic.pypi "__token__" "$(doppler secrets get POETRY_PYPI_TOKEN_PYPI --plain)"
          poetry publish --build
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_PRODUCTION }}
